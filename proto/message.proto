syntax = "proto3";
package lmq;

import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

option go_package = "github.com/eason-lee/lmq/proto";

// 消息类型枚举
enum MessageType {
  UNKNOWN = 0;
  NORMAL = 1;
  DELAYED = 2;
  DEAD_LETTER = 3;
}

// 响应状态枚举
enum Status {
  OK = 0;
  ERROR = 1;
}

// 基础消息
message Message {
  string id = 1;
  string topic = 2;
  bytes body = 3;
  google.protobuf.Timestamp timestamp = 4;
  MessageType type = 5;
  map<string, google.protobuf.Any> attributes = 6;
  int32 version = 7;
}

// 请求类型
message Request {
  string type = 1;

  // 不同类型的请求数据，只有一个会被设置
  oneof request_data {
    HeartbeatRequest heartbeat_data = 2;
    JoinRequest join_data = 3;
    LeaveRequest leave_data = 4;
    PublishRequest publish_data = 5;
    SubscribeRequest subscribe_data = 6;
    PullRequest pull_data = 7;
    AckRequest ack_data = 8;
  }
}

// 发布请求
message PublishRequest {
  string topic = 1;
  bytes body = 2;
  MessageType type = 3;
  map<string, google.protobuf.Any> attributes = 4;
  int32 delay_seconds = 5; // 延迟投递时间，单位秒
}

// 订阅请求
message SubscribeRequest {
  string group_id = 1;
  repeated string topics = 2;
  map<string, string> filters = 3; // 消息过滤条件
  int32 batch_size = 4;            // 批量获取消息数量
  int32 timeout_seconds = 5;       // 长轮询超时时间
}

// 拉取请求
message PullRequest {
  string group_id = 1;
  string topic = 2;
  int32 max_messages = 3; // 最大拉取消息数
  int64 timeout_ms = 4;   // 等待超时时间（毫秒）
}

// 确认请求
message AckRequest {
  string group_id = 1;
  repeated string message_ids = 2;
  string topic = 3;
}

// 响应
message Response {
  Status status = 1;
  string message = 2;
  oneof response_data {
    BatchMessagesResponse batch_messages_data = 3;
    NodesResponse nodes_data = 4;
    MessageResponse message_data = 5;
  }
}

// 消息响应
message MessageResponse {
  Message message = 1;
}

// 批量消息响应
message BatchMessagesResponse {
  repeated Message messages = 1;
  string next_cursor = 2; // 用于分页
}

// 心跳请求
message HeartbeatRequest {
  string node_id = 1;
  string address = 2;
  string status = 3;
  int64 time = 4;
}

// 节点加入请求
message JoinRequest {
  string node_id = 1;
  string address = 2;
}

// 节点离开请求
message LeaveRequest { string node_id = 1; }

// 节点列表响应
message NodesResponse {
  map<string, string> nodes = 1; // 节点ID -> 地址
}